// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// prior_seq_proposals
double prior_seq_proposals(Rcpp::NumericVector parameter_values, Rcpp::String prior_choice, Rcpp::LogicalVector fitted_yn);
RcppExport SEXP _IndianVectorModelling_prior_seq_proposals(SEXP parameter_valuesSEXP, SEXP prior_choiceSEXP, SEXP fitted_ynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type parameter_values(parameter_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type fitted_yn(fitted_ynSEXP);
    rcpp_result_gen = Rcpp::wrap(prior_seq_proposals(parameter_values, prior_choice, fitted_yn));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_function
double likelihood_function(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function);
RcppExport SEXP _IndianVectorModelling_likelihood_function(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_function(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function));
    return rcpp_result_gen;
END_RCPP
}
// posterior_seq_proposals
double posterior_seq_proposals(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function, double parameter_value, int parameter_index, Rcpp::String prior_choice, Rcpp::LogicalVector fitted_yn);
RcppExport SEXP _IndianVectorModelling_posterior_seq_proposals(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP, SEXP parameter_valueSEXP, SEXP parameter_indexSEXP, SEXP prior_choiceSEXP, SEXP fitted_ynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< double >::type parameter_value(parameter_valueSEXP);
    Rcpp::traits::input_parameter< int >::type parameter_index(parameter_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type fitted_yn(fitted_ynSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_seq_proposals(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function, parameter_value, parameter_index, prior_choice, fitted_yn));
    return rcpp_result_gen;
END_RCPP
}
// seq_proposal_function
double seq_proposal_function(double sd, double current_parameter_value);
RcppExport SEXP _IndianVectorModelling_seq_proposal_function(SEXP sdSEXP, SEXP current_parameter_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type current_parameter_value(current_parameter_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_proposal_function(sd, current_parameter_value));
    return rcpp_result_gen;
END_RCPP
}
// seq_proposal_SD_adapter
double seq_proposal_SD_adapter(double accepted_variable, double current_iteration, double iteration_cooling_began, double current_sd);
RcppExport SEXP _IndianVectorModelling_seq_proposal_SD_adapter(SEXP accepted_variableSEXP, SEXP current_iterationSEXP, SEXP iteration_cooling_beganSEXP, SEXP current_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type accepted_variable(accepted_variableSEXP);
    Rcpp::traits::input_parameter< double >::type current_iteration(current_iterationSEXP);
    Rcpp::traits::input_parameter< double >::type iteration_cooling_began(iteration_cooling_beganSEXP);
    Rcpp::traits::input_parameter< double >::type current_sd(current_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(seq_proposal_SD_adapter(accepted_variable, current_iteration, iteration_cooling_began, current_sd));
    return rcpp_result_gen;
END_RCPP
}
// joint_proposal_SD_adapter
Rcpp::List joint_proposal_SD_adapter(double accepted_variable, double current_iteration, double iteration_cooling_began, double current_scaling_factor, arma::mat mu_previous, arma::mat current_parameter_values, arma::mat current_covariance_matrix);
RcppExport SEXP _IndianVectorModelling_joint_proposal_SD_adapter(SEXP accepted_variableSEXP, SEXP current_iterationSEXP, SEXP iteration_cooling_beganSEXP, SEXP current_scaling_factorSEXP, SEXP mu_previousSEXP, SEXP current_parameter_valuesSEXP, SEXP current_covariance_matrixSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type accepted_variable(accepted_variableSEXP);
    Rcpp::traits::input_parameter< double >::type current_iteration(current_iterationSEXP);
    Rcpp::traits::input_parameter< double >::type iteration_cooling_began(iteration_cooling_beganSEXP);
    Rcpp::traits::input_parameter< double >::type current_scaling_factor(current_scaling_factorSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type mu_previous(mu_previousSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type current_parameter_values(current_parameter_valuesSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type current_covariance_matrix(current_covariance_matrixSEXP);
    rcpp_result_gen = Rcpp::wrap(joint_proposal_SD_adapter(accepted_variable, current_iteration, iteration_cooling_began, current_scaling_factor, mu_previous, current_parameter_values, current_covariance_matrix));
    return rcpp_result_gen;
END_RCPP
}
// posterior_joint_proposals
double posterior_joint_proposals(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function, Rcpp::String prior_choice, Rcpp::LogicalVector fitted_yn);
RcppExport SEXP _IndianVectorModelling_posterior_joint_proposals(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP, SEXP prior_choiceSEXP, SEXP fitted_ynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type fitted_yn(fitted_ynSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior_joint_proposals(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function, prior_choice, fitted_yn));
    return rcpp_result_gen;
END_RCPP
}
// mosquito_population_model
Rcpp::List mosquito_population_model(int start_time, int end, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, std::vector<double> rainfall, Rcpp::String mortality_density_function);
RcppExport SEXP _IndianVectorModelling_mosquito_population_model(SEXP start_timeSEXP, SEXP endSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP rainfallSEXP, SEXP mortality_density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_time(start_timeSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type mortality_density_function(mortality_density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(mosquito_population_model(start_time, end, fitted_parameters, static_parameters, rainfall, mortality_density_function));
    return rcpp_result_gen;
END_RCPP
}
// mvrnormArma
arma::mat mvrnormArma(arma::mat mu, arma::mat sigma);
RcppExport SEXP _IndianVectorModelling_mvrnormArma(SEXP muSEXP, SEXP sigmaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type mu(muSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type sigma(sigmaSEXP);
    rcpp_result_gen = Rcpp::wrap(mvrnormArma(mu, sigma));
    return rcpp_result_gen;
END_RCPP
}
// min_output_particle_filter
double min_output_particle_filter(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function);
RcppExport SEXP _IndianVectorModelling_min_output_particle_filter(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(min_output_particle_filter(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function));
    return rcpp_result_gen;
END_RCPP
}
// full_output_particle_filter
Rcpp::List full_output_particle_filter(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function);
RcppExport SEXP _IndianVectorModelling_full_output_particle_filter(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(full_output_particle_filter(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function));
    return rcpp_result_gen;
END_RCPP
}
// Negative_Binomial
double Negative_Binomial(double k, double n, double r, double p);
RcppExport SEXP _IndianVectorModelling_Negative_Binomial(SEXP kSEXP, SEXP nSEXP, SEXP rSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Negative_Binomial(k, n, r, p));
    return rcpp_result_gen;
END_RCPP
}
// Particle_Weight_Normalisation
std::vector <double> Particle_Weight_Normalisation(std::vector <double> particle_weights);
RcppExport SEXP _IndianVectorModelling_Particle_Weight_Normalisation(SEXP particle_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector <double> >::type particle_weights(particle_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(Particle_Weight_Normalisation(particle_weights));
    return rcpp_result_gen;
END_RCPP
}
// initial_state_sample
std::vector <int> initial_state_sample(Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, double initial_K);
RcppExport SEXP _IndianVectorModelling_initial_state_sample(SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP initial_KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< double >::type initial_K(initial_KSEXP);
    rcpp_result_gen = Rcpp::wrap(initial_state_sample(fitted_parameters, static_parameters, initial_K));
    return rcpp_result_gen;
END_RCPP
}
// weighted_sampling_with_replacement
std::vector<int> weighted_sampling_with_replacement(int n, std::vector<double> prob, double p_tot, int K);
RcppExport SEXP _IndianVectorModelling_weighted_sampling_with_replacement(SEXP nSEXP, SEXP probSEXP, SEXP p_totSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prob(probSEXP);
    Rcpp::traits::input_parameter< double >::type p_tot(p_totSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_sampling_with_replacement(n, prob, p_tot, K));
    return rcpp_result_gen;
END_RCPP
}
// runMCMC_joint_props
Rcpp::List runMCMC_joint_props(int start_sd_adaptation, int end_sd_adaptation, int number_of_iterations, std::vector <double> initial_sds, Rcpp::NumericVector model_parameters, Rcpp::NumericVector static_parameters, int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::String density_function, Rcpp::String prior_choice, Rcpp::LogicalVector fitted_yn);
RcppExport SEXP _IndianVectorModelling_runMCMC_joint_props(SEXP start_sd_adaptationSEXP, SEXP end_sd_adaptationSEXP, SEXP number_of_iterationsSEXP, SEXP initial_sdsSEXP, SEXP model_parametersSEXP, SEXP static_parametersSEXP, SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP density_functionSEXP, SEXP prior_choiceSEXP, SEXP fitted_ynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_sd_adaptation(start_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< int >::type end_sd_adaptation(end_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type initial_sds(initial_sdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type model_parameters(model_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type fitted_yn(fitted_ynSEXP);
    rcpp_result_gen = Rcpp::wrap(runMCMC_joint_props(start_sd_adaptation, end_sd_adaptation, number_of_iterations, initial_sds, model_parameters, static_parameters, N, rainfall, obsData, number_of_datapoints, data_timeframe, density_function, prior_choice, fitted_yn));
    return rcpp_result_gen;
END_RCPP
}
// runMCMC_seq_props
Rcpp::List runMCMC_seq_props(int start_sd_adaptation, int end_sd_adaptation, std::vector <double> acceptance_ratio, std::vector<double> sd_proposals, int number_of_iterations, Rcpp::NumericVector model_parameters, Rcpp::NumericVector static_parameters, int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::String density_function, Rcpp::String prior_choice, Rcpp::LogicalVector fitted_yn);
RcppExport SEXP _IndianVectorModelling_runMCMC_seq_props(SEXP start_sd_adaptationSEXP, SEXP end_sd_adaptationSEXP, SEXP acceptance_ratioSEXP, SEXP sd_proposalsSEXP, SEXP number_of_iterationsSEXP, SEXP model_parametersSEXP, SEXP static_parametersSEXP, SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP density_functionSEXP, SEXP prior_choiceSEXP, SEXP fitted_ynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_sd_adaptation(start_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< int >::type end_sd_adaptation(end_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type acceptance_ratio(acceptance_ratioSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sd_proposals(sd_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type model_parameters(model_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type fitted_yn(fitted_ynSEXP);
    rcpp_result_gen = Rcpp::wrap(runMCMC_seq_props(start_sd_adaptation, end_sd_adaptation, acceptance_ratio, sd_proposals, number_of_iterations, model_parameters, static_parameters, N, rainfall, obsData, number_of_datapoints, data_timeframe, density_function, prior_choice, fitted_yn));
    return rcpp_result_gen;
END_RCPP
}
// testerr
Rcpp::List testerr(int start_sd_adaptation, int end_sd_adaptation, int number_of_iterations, std::vector <double> initial_sds, Rcpp::NumericVector model_parameters, Rcpp::NumericVector static_parameters, int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::String density_function, Rcpp::String prior_choice, Rcpp::LogicalVector fitted_yn);
RcppExport SEXP _IndianVectorModelling_testerr(SEXP start_sd_adaptationSEXP, SEXP end_sd_adaptationSEXP, SEXP number_of_iterationsSEXP, SEXP initial_sdsSEXP, SEXP model_parametersSEXP, SEXP static_parametersSEXP, SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP density_functionSEXP, SEXP prior_choiceSEXP, SEXP fitted_ynSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_sd_adaptation(start_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< int >::type end_sd_adaptation(end_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type initial_sds(initial_sdsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type model_parameters(model_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    Rcpp::traits::input_parameter< Rcpp::LogicalVector >::type fitted_yn(fitted_ynSEXP);
    rcpp_result_gen = Rcpp::wrap(testerr(start_sd_adaptation, end_sd_adaptation, number_of_iterations, initial_sds, model_parameters, static_parameters, N, rainfall, obsData, number_of_datapoints, data_timeframe, density_function, prior_choice, fitted_yn));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IndianVectorModelling_prior_seq_proposals", (DL_FUNC) &_IndianVectorModelling_prior_seq_proposals, 3},
    {"_IndianVectorModelling_likelihood_function", (DL_FUNC) &_IndianVectorModelling_likelihood_function, 8},
    {"_IndianVectorModelling_posterior_seq_proposals", (DL_FUNC) &_IndianVectorModelling_posterior_seq_proposals, 12},
    {"_IndianVectorModelling_seq_proposal_function", (DL_FUNC) &_IndianVectorModelling_seq_proposal_function, 2},
    {"_IndianVectorModelling_seq_proposal_SD_adapter", (DL_FUNC) &_IndianVectorModelling_seq_proposal_SD_adapter, 4},
    {"_IndianVectorModelling_joint_proposal_SD_adapter", (DL_FUNC) &_IndianVectorModelling_joint_proposal_SD_adapter, 7},
    {"_IndianVectorModelling_posterior_joint_proposals", (DL_FUNC) &_IndianVectorModelling_posterior_joint_proposals, 10},
    {"_IndianVectorModelling_mosquito_population_model", (DL_FUNC) &_IndianVectorModelling_mosquito_population_model, 6},
    {"_IndianVectorModelling_mvrnormArma", (DL_FUNC) &_IndianVectorModelling_mvrnormArma, 2},
    {"_IndianVectorModelling_min_output_particle_filter", (DL_FUNC) &_IndianVectorModelling_min_output_particle_filter, 8},
    {"_IndianVectorModelling_full_output_particle_filter", (DL_FUNC) &_IndianVectorModelling_full_output_particle_filter, 8},
    {"_IndianVectorModelling_Negative_Binomial", (DL_FUNC) &_IndianVectorModelling_Negative_Binomial, 4},
    {"_IndianVectorModelling_Particle_Weight_Normalisation", (DL_FUNC) &_IndianVectorModelling_Particle_Weight_Normalisation, 1},
    {"_IndianVectorModelling_initial_state_sample", (DL_FUNC) &_IndianVectorModelling_initial_state_sample, 3},
    {"_IndianVectorModelling_weighted_sampling_with_replacement", (DL_FUNC) &_IndianVectorModelling_weighted_sampling_with_replacement, 4},
    {"_IndianVectorModelling_runMCMC_joint_props", (DL_FUNC) &_IndianVectorModelling_runMCMC_joint_props, 14},
    {"_IndianVectorModelling_runMCMC_seq_props", (DL_FUNC) &_IndianVectorModelling_runMCMC_seq_props, 15},
    {"_IndianVectorModelling_testerr", (DL_FUNC) &_IndianVectorModelling_testerr, 14},
    {NULL, NULL, 0}
};

RcppExport void R_init_IndianVectorModelling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
