// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// full_output_particle_filter
Rcpp::List full_output_particle_filter(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function);
RcppExport SEXP _IndianVectorModelling_full_output_particle_filter(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(full_output_particle_filter(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function));
    return rcpp_result_gen;
END_RCPP
}
// initial_state_sample
Rcpp::NumericVector initial_state_sample(Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters);
RcppExport SEXP _IndianVectorModelling_initial_state_sample(SEXP fitted_parametersSEXP, SEXP static_parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(initial_state_sample(fitted_parameters, static_parameters));
    return rcpp_result_gen;
END_RCPP
}
// prior
double prior(Rcpp::NumericVector parameter_values, Rcpp::String prior_choice);
RcppExport SEXP _IndianVectorModelling_prior(SEXP parameter_valuesSEXP, SEXP prior_choiceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type parameter_values(parameter_valuesSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    rcpp_result_gen = Rcpp::wrap(prior(parameter_values, prior_choice));
    return rcpp_result_gen;
END_RCPP
}
// likelihood_function
double likelihood_function(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function);
RcppExport SEXP _IndianVectorModelling_likelihood_function(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(likelihood_function(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function));
    return rcpp_result_gen;
END_RCPP
}
// posterior
double posterior(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function, double parameter_value, Rcpp::String parameter_index, Rcpp::String prior_choice);
RcppExport SEXP _IndianVectorModelling_posterior(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP, SEXP parameter_valueSEXP, SEXP parameter_indexSEXP, SEXP prior_choiceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< double >::type parameter_value(parameter_valueSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type parameter_index(parameter_indexSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    rcpp_result_gen = Rcpp::wrap(posterior(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function, parameter_value, parameter_index, prior_choice));
    return rcpp_result_gen;
END_RCPP
}
// min_output_particle_filter
double min_output_particle_filter(int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, Rcpp::String density_function);
RcppExport SEXP _IndianVectorModelling_min_output_particle_filter(SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(min_output_particle_filter(N, rainfall, obsData, number_of_datapoints, data_timeframe, fitted_parameters, static_parameters, density_function));
    return rcpp_result_gen;
END_RCPP
}
// mosquito_population_model
Rcpp::List mosquito_population_model(int start_time, int end, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, std::vector<double> rainfall, Rcpp::String density_function);
RcppExport SEXP _IndianVectorModelling_mosquito_population_model(SEXP start_timeSEXP, SEXP endSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP rainfallSEXP, SEXP density_functionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_time(start_timeSEXP);
    Rcpp::traits::input_parameter< int >::type end(endSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    rcpp_result_gen = Rcpp::wrap(mosquito_population_model(start_time, end, fitted_parameters, static_parameters, rainfall, density_function));
    return rcpp_result_gen;
END_RCPP
}
// Negative_Binomial
double Negative_Binomial(double k, double n, double r, double p);
RcppExport SEXP _IndianVectorModelling_Negative_Binomial(SEXP kSEXP, SEXP nSEXP, SEXP rSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type k(kSEXP);
    Rcpp::traits::input_parameter< double >::type n(nSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(Negative_Binomial(k, n, r, p));
    return rcpp_result_gen;
END_RCPP
}
// Particle_Weight_Normalisation
std::vector <double> Particle_Weight_Normalisation(std::vector <double> particle_weights);
RcppExport SEXP _IndianVectorModelling_Particle_Weight_Normalisation(SEXP particle_weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector <double> >::type particle_weights(particle_weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(Particle_Weight_Normalisation(particle_weights));
    return rcpp_result_gen;
END_RCPP
}
// proposal_function
double proposal_function(double sd, double current_parameter_value);
RcppExport SEXP _IndianVectorModelling_proposal_function(SEXP sdSEXP, SEXP current_parameter_valueSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type sd(sdSEXP);
    Rcpp::traits::input_parameter< double >::type current_parameter_value(current_parameter_valueSEXP);
    rcpp_result_gen = Rcpp::wrap(proposal_function(sd, current_parameter_value));
    return rcpp_result_gen;
END_RCPP
}
// proposal_SD_adapter
double proposal_SD_adapter(double current_sd, double acceptance_ratio, double current_acceptance_ratio, double max_sd);
RcppExport SEXP _IndianVectorModelling_proposal_SD_adapter(SEXP current_sdSEXP, SEXP acceptance_ratioSEXP, SEXP current_acceptance_ratioSEXP, SEXP max_sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type current_sd(current_sdSEXP);
    Rcpp::traits::input_parameter< double >::type acceptance_ratio(acceptance_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type current_acceptance_ratio(current_acceptance_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type max_sd(max_sdSEXP);
    rcpp_result_gen = Rcpp::wrap(proposal_SD_adapter(current_sd, acceptance_ratio, current_acceptance_ratio, max_sd));
    return rcpp_result_gen;
END_RCPP
}
// proposal_SD_adapter_mark_two
double proposal_SD_adapter_mark_two(double current_sd, double current_acceptance_ratio, double max_sd, double cooling_factor, double current_iteration, double iteration_cooling_began);
RcppExport SEXP _IndianVectorModelling_proposal_SD_adapter_mark_two(SEXP current_sdSEXP, SEXP current_acceptance_ratioSEXP, SEXP max_sdSEXP, SEXP cooling_factorSEXP, SEXP current_iterationSEXP, SEXP iteration_cooling_beganSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type current_sd(current_sdSEXP);
    Rcpp::traits::input_parameter< double >::type current_acceptance_ratio(current_acceptance_ratioSEXP);
    Rcpp::traits::input_parameter< double >::type max_sd(max_sdSEXP);
    Rcpp::traits::input_parameter< double >::type cooling_factor(cooling_factorSEXP);
    Rcpp::traits::input_parameter< double >::type current_iteration(current_iterationSEXP);
    Rcpp::traits::input_parameter< double >::type iteration_cooling_began(iteration_cooling_beganSEXP);
    rcpp_result_gen = Rcpp::wrap(proposal_SD_adapter_mark_two(current_sd, current_acceptance_ratio, max_sd, cooling_factor, current_iteration, iteration_cooling_began));
    return rcpp_result_gen;
END_RCPP
}
// runMCMC
Rcpp::List runMCMC(int start_sd_adaptation, int end_sd_adaptation, std::vector <double> max_sd, std::vector <double> acceptance_ratio, std::vector<double> sd_proposals, int number_of_iterations, Rcpp::StringVector parameters_to_be_fitted, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::String density_function, Rcpp::String prior_choice);
RcppExport SEXP _IndianVectorModelling_runMCMC(SEXP start_sd_adaptationSEXP, SEXP end_sd_adaptationSEXP, SEXP max_sdSEXP, SEXP acceptance_ratioSEXP, SEXP sd_proposalsSEXP, SEXP number_of_iterationsSEXP, SEXP parameters_to_be_fittedSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP density_functionSEXP, SEXP prior_choiceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_sd_adaptation(start_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< int >::type end_sd_adaptation(end_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type max_sd(max_sdSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type acceptance_ratio(acceptance_ratioSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sd_proposals(sd_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type parameters_to_be_fitted(parameters_to_be_fittedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    rcpp_result_gen = Rcpp::wrap(runMCMC(start_sd_adaptation, end_sd_adaptation, max_sd, acceptance_ratio, sd_proposals, number_of_iterations, parameters_to_be_fitted, fitted_parameters, static_parameters, N, rainfall, obsData, number_of_datapoints, data_timeframe, density_function, prior_choice));
    return rcpp_result_gen;
END_RCPP
}
// runMCMC_alt_tune
Rcpp::List runMCMC_alt_tune(int start_sd_adaptation, int end_sd_adaptation, std::vector <double> max_sd, std::vector <double> acceptance_ratio, std::vector<double> sd_proposals, int number_of_iterations, Rcpp::StringVector parameters_to_be_fitted, Rcpp::NumericVector fitted_parameters, Rcpp::NumericVector static_parameters, int N, std::vector <double> rainfall, std::vector <int> obsData, int number_of_datapoints, int data_timeframe, Rcpp::String density_function, Rcpp::String prior_choice);
RcppExport SEXP _IndianVectorModelling_runMCMC_alt_tune(SEXP start_sd_adaptationSEXP, SEXP end_sd_adaptationSEXP, SEXP max_sdSEXP, SEXP acceptance_ratioSEXP, SEXP sd_proposalsSEXP, SEXP number_of_iterationsSEXP, SEXP parameters_to_be_fittedSEXP, SEXP fitted_parametersSEXP, SEXP static_parametersSEXP, SEXP NSEXP, SEXP rainfallSEXP, SEXP obsDataSEXP, SEXP number_of_datapointsSEXP, SEXP data_timeframeSEXP, SEXP density_functionSEXP, SEXP prior_choiceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type start_sd_adaptation(start_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< int >::type end_sd_adaptation(end_sd_adaptationSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type max_sd(max_sdSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type acceptance_ratio(acceptance_ratioSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type sd_proposals(sd_proposalsSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_iterations(number_of_iterationsSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type parameters_to_be_fitted(parameters_to_be_fittedSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type fitted_parameters(fitted_parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type static_parameters(static_parametersSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::vector <double> >::type rainfall(rainfallSEXP);
    Rcpp::traits::input_parameter< std::vector <int> >::type obsData(obsDataSEXP);
    Rcpp::traits::input_parameter< int >::type number_of_datapoints(number_of_datapointsSEXP);
    Rcpp::traits::input_parameter< int >::type data_timeframe(data_timeframeSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type density_function(density_functionSEXP);
    Rcpp::traits::input_parameter< Rcpp::String >::type prior_choice(prior_choiceSEXP);
    rcpp_result_gen = Rcpp::wrap(runMCMC_alt_tune(start_sd_adaptation, end_sd_adaptation, max_sd, acceptance_ratio, sd_proposals, number_of_iterations, parameters_to_be_fitted, fitted_parameters, static_parameters, N, rainfall, obsData, number_of_datapoints, data_timeframe, density_function, prior_choice));
    return rcpp_result_gen;
END_RCPP
}
// weighted_sampling
std::vector<int> weighted_sampling(int n, std::vector<double> prob, double p_tot, int K);
RcppExport SEXP _IndianVectorModelling_weighted_sampling(SEXP nSEXP, SEXP probSEXP, SEXP p_totSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type prob(probSEXP);
    Rcpp::traits::input_parameter< double >::type p_tot(p_totSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(weighted_sampling(n, prob, p_tot, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_IndianVectorModelling_full_output_particle_filter", (DL_FUNC) &_IndianVectorModelling_full_output_particle_filter, 8},
    {"_IndianVectorModelling_initial_state_sample", (DL_FUNC) &_IndianVectorModelling_initial_state_sample, 2},
    {"_IndianVectorModelling_prior", (DL_FUNC) &_IndianVectorModelling_prior, 2},
    {"_IndianVectorModelling_likelihood_function", (DL_FUNC) &_IndianVectorModelling_likelihood_function, 8},
    {"_IndianVectorModelling_posterior", (DL_FUNC) &_IndianVectorModelling_posterior, 11},
    {"_IndianVectorModelling_min_output_particle_filter", (DL_FUNC) &_IndianVectorModelling_min_output_particle_filter, 8},
    {"_IndianVectorModelling_mosquito_population_model", (DL_FUNC) &_IndianVectorModelling_mosquito_population_model, 6},
    {"_IndianVectorModelling_Negative_Binomial", (DL_FUNC) &_IndianVectorModelling_Negative_Binomial, 4},
    {"_IndianVectorModelling_Particle_Weight_Normalisation", (DL_FUNC) &_IndianVectorModelling_Particle_Weight_Normalisation, 1},
    {"_IndianVectorModelling_proposal_function", (DL_FUNC) &_IndianVectorModelling_proposal_function, 2},
    {"_IndianVectorModelling_proposal_SD_adapter", (DL_FUNC) &_IndianVectorModelling_proposal_SD_adapter, 4},
    {"_IndianVectorModelling_proposal_SD_adapter_mark_two", (DL_FUNC) &_IndianVectorModelling_proposal_SD_adapter_mark_two, 6},
    {"_IndianVectorModelling_runMCMC", (DL_FUNC) &_IndianVectorModelling_runMCMC, 16},
    {"_IndianVectorModelling_runMCMC_alt_tune", (DL_FUNC) &_IndianVectorModelling_runMCMC_alt_tune, 16},
    {"_IndianVectorModelling_weighted_sampling", (DL_FUNC) &_IndianVectorModelling_weighted_sampling, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_IndianVectorModelling(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
